void init(int arr[], int size[], int n) {
	for(int i=0; i < n; i++) {
		arr[i] = i;
		size[i] = 1;
	}
}

// with path compression(grandparent) logN becomes log*n(Can be max 5)
int root(int arr[], int a) {
	while(arr[a] != a ) {
		arr[a] = arr[arr[a]];
		a = arr[a];
	}
	return a;
}


//returns true if components are connected
// log n
bool find(int arr[], int a, int b) {
	if(root(a) == root(b))
		return true;
	else 
		return false;
}

// log n
void union(int arr[], int size[], int a, int b) {
	int rootA = root(arr, a);
	int rootB = root(arr, b);

	if(size[rootA] < size[rootB]) {
		arr[rootA] = rootB;
		size[rootB] += rootA;
	}
	else {
		arr[rootB] = rootA;
		size[rootA] += rootB;	
	}
}