//segment tree for maximum value

void build(ll tree[],ll a[],ll node, ll start, ll end)
{
    if(start == end)
    {
        tree[node] = a[start];
    }
    else
    {
        ll mid = (start + end) / 2;
        
        build(tree,a,(2*node)+1, start, mid);
        
        build(tree,a,(2*node)+2, mid+1, end);
        
        tree[node] = max(tree[(2*node)+1],tree[(2*node)+2]);
    }
}

void update(ll tree[],ll a[],ll node, ll start, ll end, ll idx, ll val)
{
    if(start == end)
    {
        a[idx] = val;
        tree[node] = val;
    }
    else
    {
        ll mid = (start + end) / 2;

        if(start <= idx && idx <= mid)
        {
            update(tree,a,(2*node)+1, start, mid, idx, val);
        }
        else
        {
            update(tree,a,(2*node)+2, mid+1, end, idx, val);
        }

        tree[node] = max(tree[(2*node)+1],tree[(2*node)+2]);;
    }
}

ll query(ll tree[],ll node, ll start, ll end, ll l, ll r)
{
    if(r < start || end < l)
    {
        return 0;
    }

    if(l <= start && end <= r)
    {
        // range of node completely inside given range
        return tree[node];
    }

    // range represented by a node is partially inside and partially outside the given range
    ll mid = (start + end) / 2;
    ll p1 = query(tree,(2*node)+1, start, mid, l, r);
    ll p2 = query(tree,(2*node)+2, mid+1, end, l, r);
    return max(p1,p2);
}